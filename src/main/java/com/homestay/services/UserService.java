package com.homestay.services;

import com.homestay.models.User;
import com.homestay.models.Role;
import com.homestay.repositories.UserRepository;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    private static final Logger logger = LoggerFactory.getLogger(UserService.class);
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    // ƒê·ªçc gi√° tr·ªã ƒë∆∞·ªùng d·∫´n t·ª´ application.properties ho·∫∑c c√≥ th·ªÉ hardcode ·ªü ƒë√¢y
    @Value("${upload.avatar.dir:D:/java/Lap-trinh-JAVA-main/uploads/avatars}")
    private String uploadDir;

    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public User registerUser(User user) {
        if (existsByUsername(user.getUsername())) {
            throw new IllegalArgumentException("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i!");
        }
        if (existsByEmail(user.getEmail())) {
            throw new IllegalArgumentException("Email ƒë√£ t·ªìn t·∫°i!");
        }
        if (existsByPhone(user.getPhone())) {
            throw new IllegalArgumentException("S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!");
        }

        validateUser(user);
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        if (user.getRole() == null) {
            user.setRole(Role.USER);
        }

        User savedUser = userRepository.save(user);
        logger.info("‚úÖ Ng∆∞·ªùi d√πng '{}' ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω th√†nh c√¥ng!", user.getUsername());
        return savedUser;
    }

    public List<User> getAllUsers() {
        logger.info("üìå L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng");
        return userRepository.findAll();
    }

    public Optional<User> findById(Long id) {
        return userRepository.findById(id);
    }

    public Optional<User> getUserByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    public Optional<User> getUsername(String username) {
        return userRepository.findByUsername(username);
    }

    public User updateUser(Long id, User updatedUser) {
        return userRepository.findById(id).map(user -> {
            logger.info("üîÑ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng ID: {}", id);

            if (updatedUser.getUsername() != null && !updatedUser.getUsername().isEmpty()) {
                user.setUsername(updatedUser.getUsername());
            }
            if (updatedUser.getEmail() != null && !updatedUser.getEmail().isEmpty()) {
                user.setEmail(updatedUser.getEmail());
            }
            if (updatedUser.getPhone() != null && !updatedUser.getPhone().isEmpty()) {
                user.setPhone(updatedUser.getPhone());
            }
            if (updatedUser.getRole() != null) {
                user.setRole(updatedUser.getRole());
            }

            return userRepository.save(user);
        }).orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!"));
    }

    public void updatePassword(Long id, String newPassword) {
        userRepository.findById(id).ifPresent(user -> {
            user.setPassword(passwordEncoder.encode(newPassword));
            userRepository.save(user);
            logger.info("üîë M·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng ID: {} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!", id);
        });
    }

    public User save(User user) {
        return userRepository.save(user);
    }

    public void deleteUser(Long id) {
        if (!userRepository.existsById(id)) {
            throw new IllegalArgumentException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
        }
        userRepository.deleteById(id);
        logger.info("üóëÔ∏è Ng∆∞·ªùi d√πng ID: {} ƒë√£ b·ªã x√≥a!", id);
    }

    @PostConstruct
    public void initAdminUser() {
        if (userRepository.findByUsername("admin").isEmpty()) {
            User user = new User("admin", passwordEncoder.encode("123"), "tdanh589@gmail.com", "0123456789", Role.ADMIN);
            userRepository.save(user);
            logger.info("‚úÖ T√†i kho·∫£n admin t·∫°o th√†nh c√¥ng!");
        }
    }

    public boolean existsByUsername(String username) {
        return userRepository.existsByUsername(username);
    }

    public boolean existsByEmail(String email) {
        return userRepository.existsByEmail(email);
    }

    public boolean existsByPhone(String phone) {
        return userRepository.existsByPhone(phone);
    }

    private void validateUser(User user) {
        if (user.getPassword().length() < 8) {
            throw new IllegalArgumentException("M·∫≠t kh·∫©u qu√° ng·∫Øn! √çt nh·∫•t 8 k√Ω t·ª±.");
        }
    }

    // Ph∆∞∆°ng th·ª©c l∆∞u ·∫£nh avatar
    public String saveImage(MultipartFile file) throws IOException {
        // L·∫•y t√™n file v√† ƒë·∫∑t t√™n m·ªõi
        String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename();
        Path filePath = Paths.get(uploadDir, fileName);
        
        // Ki·ªÉm tra n·∫øu th∆∞ m·ª•c upload kh√¥ng t·ªìn t·∫°i th√¨ t·∫°o m·ªõi
        File uploadDirPath = new File(uploadDir);
        if (!uploadDirPath.exists()) {
            uploadDirPath.mkdirs();
        }

        // L∆∞u file v√†o th∆∞ m·ª•c
        Files.copy(file.getInputStream(), filePath);

        // Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·ªÉ l∆∞u trong c∆° s·ªü d·ªØ li·ªáu
        return "/uploads/avatars/" + fileName;
    }
}
